??runApp
runAPP("shiny.R")
library(shinu)
library(shiny)
runAPP("shiny.R")
runApp("shiny.R")
# Database with a lot of species and their conservation status
tbl_status <- read.csv("species_status.csv", row.names = 1)
View(tbl_status)
wkt <- readWKT('POLYGON((-72.4091168552851 46.87191488974857,-72.2992535740351 46.7967563232803,-72.1014996677851 46.88693398983232,-72.4091168552851 46.87191488974857))')
wkt
proj4string(wkt) = CRS("+proj=longlat +ellps=WGS84")
extent <- spTransform(wkt, CRS("+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs "))
spTransform(extent, CRS("+proj=longlat +ellps=WGS84"))
occ <- occ_search(geometry = writeWKT = wkt, limit = 10)$data
occ <- occ_search(geometry = writeWKT(wkt), limit = 10)$data
View(occ)
occ_clean <- occ %>%
filter(!str_detect(issues, "txmatnon|txmathi|txmatfuz")) %>%
filter(!is.na(eventDate))
occ_sp <- SpatialPointsDataFrame(
coords = occ_clean[,4:3],
data = occ_clean[,c(1,24:30,35:38,47)],
proj4string = CRS("+proj=longlat +ellps=WGS84"))
occ_intersect <- as.data.frame(raster::intersect(bind(occ_sp,occ_sp), extent))
names(occ_intersect)
occ_intersect
head(occ_intersect)
View(occ_intersect)
View(extent)
head(occ)
names(occ_clean)
class(occ_clean)
?class
?type
typeof(occ_clean)
?SpatialGridDataFrame
occ_sp <- SpatialPointsDataFrame(
coords = occ_clean[, c("decimalLongitude", "decimalLatitude")],
data = occ_clean[, c("names", "basisOfRecord", "kingdom", "phylum", "order", "family", "genus", "species", "year", "eventDate", "class", "country")],
proj4string = CRS("+proj=longlat +ellps=WGS84"))
occ_sp <- SpatialPointsDataFrame(
coords = occ_clean[, c("decimalLongitude", "decimalLatitude")],
data = occ_clean[, c("name", "basisOfRecord", "kingdom", "phylum", "order", "family", "genus", "species", "year", "eventDate", "class", "country")],
proj4string = CRS("+proj=longlat +ellps=WGS84"))
occ_sp
occ_intersect <- as.data.frame(raster::intersect(bind(occ_sp,occ_sp), extent))
View(occ_intersect)
species_table <- occ_intersect %>%
group_by(species) %>%
summarise(last_record=str_sub(max(eventDate),1,10),
kingdom = kingdom[1],
class=class[1],
# Divide by 2 to correct the dupplication we did when calling the function intersect
No_records=n()/2) %>%
filter(!is.na(species)) %>%
# Add conservation statuses from the database tbl_status
left_join(tbl_status, by="species")
View(species_table)
species_table$QC_status <- species_table$QC_status %>%
as.character() %>%
replace_na("taxon_notlisted")
species_table$iucn <- species_table$iucn %>%
as.character() %>%
replace_na("taxon_notlisted")
??clear
rm(list = ls())
runAPP("shiny.R")
library(shiny)
runAPP("shiny.R")
runApp("shiny.R")
runApp("shiny.R")
library(shiny)
library(shinythemes)
library(rgbif)
library(dplyr)
library(stringr)
library(DT)
library(rredlist)
library(leaflet)
library(sp)
library(rgeos)
library(raster)
library(RColorBrewer)
library(ggplot2)
library(natserv)
library(tidyr)
wkt <- readWKT("POLYGON((-72.4091168552851 46.87191488974857,-72.2992535740351 46.7967563232803,-72.1014996677851 46.88693398983232,-72.4091168552851 46.87191488974857))")
proj4string(wkt) = CRS("+proj=longlat +ellps=WGS84")
runApp("shiny.R")
runApp("shiny.R")
extent <- spTransform(wkt, CRS("+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs ")) %>%
# Buffer
gBuffer(width = 1*5*1000)
spTransform(extent, CRS("+proj=longlat +ellps=WGS84"))
download_geometry <- extent
occ <- occ_search(geometry = writeWKT(download_geometry, limit=1000)$data
)
occ <- occ_search(geometry = writeWKT(download_geometry), limit=1000)$data
occ <- occ_search(geometry = writeWKT(download_geometry), limit=1000)$data
occ <- occ_search(geometry = writeWKT(download_geometry), limit=500)$data
occ <- occ_search(geometry = writeWKT(download_geometry), limit=200)$data
occ <- occ_search(geometry = writeWKT(download_geometry), limit=200)$data
occ <- occ_search(geometry = writeWKT(download_geometry), limit=200)$data
occ <- occ_search(geometry = writeWKT(wkt), limit=200)$data
writeWKT(download_geometry)
writeWKT(wkt)
spTransform(extent, CRS("+proj=longlat +ellps=WGS84"))
View(extent)
View(download_geometry)
extent <- spTransform(wkt, CRS("+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs ")) %>%
# Buffer
gBuffer(width = 1*5*1000) %>%
spTransform(extent, CRS("+proj=longlat +ellps=WGS84"))
extent <- spTransform(extent, CRS("+proj=longlat +ellps=WGS84"))
View(extent)
View(download_geometry)
download_geometry <- extent
occ <-     occ_search(geometry = writeWKT(download_geometry), limit=1000)$data
proj4string(wkt) = CRS("+proj=longlat +ellps=WGS84")
extent <- spTransform(wkt, CRS("+proj=lcc +lat_1=60 +lat_2=46 +lat_0=44 +lon_0=-68.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs ")) %>%
# Buffer
gBuffer(width = 0)
extent <- spTransform(extent, CRS("+proj=longlat +ellps=WGS84"))
occ_clean <- occ %>%
filter(!str_detect(issues, "txmatnon|txmathi|txmatfuz")) %>%
filter(!is.na(eventDate))
occ_sp <- SpatialPointsDataFrame(
coords = occ_clean[, c("decimalLongitude", "decimalLatitude")],
data = occ_clean[, c("name", "basisOfRecord", "kingdom", "phylum", "order", "family", "genus", "species", "year", "eventDate", "class", "country")],
proj4string = CRS("+proj=longlat +ellps=WGS84"))
occ_intersect <- as.data.frame(raster::intersect(bind(occ_sp,occ_sp), extent))
species_table <- occ_intersect %>%
group_by(species) %>%
summarise(last_record=str_sub(max(eventDate),1,10),
kingdom = kingdom[1],
class=class[1],
# Divide by 2 to correct the dupplication we did when calling the function intersect
No_records=n()/2) %>%
filter(!is.na(species)) %>%
# Add conservation statuses from the database tbl_status
left_join(tbl_status, by="species")
tbl_status <- read.csv("species_status.csv", row.names = 1)
species_table <- occ_intersect %>%
group_by(species) %>%
summarise(last_record=str_sub(max(eventDate),1,10),
kingdom = kingdom[1],
class=class[1],
# Divide by 2 to correct the dupplication we did when calling the function intersect
No_records=n()/2) %>%
filter(!is.na(species)) %>%
# Add conservation statuses from the database tbl_status
left_join(tbl_status, by="species")
species_table$QC_status <- species_table$QC_status %>%
as.character() %>%
replace_na("taxon_notlisted")
species_table$iucn <- species_table$iucn %>%
as.character() %>%
replace_na("taxon_notlisted")
View(species_table)
species <- DT::renderDataTable({
species_table() %>%
filter(as.numeric(substring(last_record,1,4)) >= 2010)
})
species <- DT::DataTable({
species_table %>%
filter(as.numeric(substring(last_record,1,4)) >= 2010)
})
runApp("shiny.R")
library(rsconnect)
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='quebecbiodiversitydataexplorer',
token='6F2F1C7D71110838EE3D6670F69F1737',
secret='<SECRET>')
rsconnect::setAccountInfo(name='quebecbiodiversitydataexplorer',
token='6F2F1C7D71110838EE3D6670F69F1737',
secret='3i5UzrCE+XzEAqPpZQqy73x/PKKBq30hxOwpY4T8')
library(shiny)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
?radioButtons
runApp()
runApp()
runApp()
runApp()
?else
?if
else
runApp()
